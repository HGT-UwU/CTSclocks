CTF.m = NULL, tissue = 'otherTissue')
agePred.v = CTSclockAge(Test.m, CTSclock = 'Hep', dataType = 'bulk', CTF.m = NULL, tissue = 'otherTissue')
data.m=Test.m
if (CTSclock %in% c('Neu-In', 'Neu-Ex', 'Glia-In', 'Glia-Ex', 'Brain')){
data(list = paste0(CTSclock, 'Coef'))
if (CTSclock %in% c('Neu-Ex', 'Glia-Ex', 'Hep', 'Liver')){
DNAmAgePred.v = pred(data.m, clockCoef.df)
}else if(CTSclock %in% c('Neu-In', 'Glia-In', 'Brain')){
data.m = ProcessData(data.m, dataType = dataType, tissue = tissue, CTF.m = CTF.m)
DNAmAgePred.v = pred(data.m, clockCoef.df)
}
}else if(CTSclock %in% c('Hep', 'Liver')){
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
data.m <- data.m[na.omit(idx),]
DNAmAgePred.v <- predict.glmnet(LiverClock.glm, newx = t(data.m))
}
CTSclock = 'Hep';dataType = 'bulk'; CTF.m = NULL; tissue = 'otherTissue'
CTSclock %in% c('Hep', 'Liver')
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
data.m <- data.m[na.omit(idx),]
DNAmAgePred.v <- predict.glmnet(LiverClock.glm, newx = t(data.m))
DNAmAgePred.v <- predict.glmnet(LiverClock.glm, newx = data.m)
View(data.m)
library(glmnet)
DNAmAgePred.v <- predict.glmnet(LiverClock.glm, newx = t(data.m))
predict.glmnet(LiverClock.glm, newx = t(beta.m))
mm=t(data.m)
View(mm)
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
data.m <- data.m[na.omit(idx),]
DNAmAgePred.v <- predict.glmnet(LiverClock.glm, newx = t(data.m))
CTSclock='Liver'
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
data.m <- data.m[na.omit(idx),]
DNAmAgePred.v <- predict.glmnet(LiverClock.glm, newx = t(data.m))
newx = t(data.m)
object=LiverClock.glm
type = match.arg(type)
setwd('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/RpackageDev/GuoData')
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
load("HepClock.Rd")
load("LiverClock.Rd")
load("ExampleData_Liver.Rd")
HepClockCpGs <- rownames(HepClock.glm$beta)
TestSetCpGs <- rownames(Test.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(HepClockCpGs, TestSetCpGs)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
Test.m <- Test.m[na.omit(idx),]
DNAmAge <- predict.glmnet(HepClock.glm,newx = t(Test.m))
CTSclock='hep'
CTSclock='Hep'
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
data(ExampleData_Liver)
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
data.m=beta.m
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
data.m <- data.m[na.omit(idx),]
DNAmAgePred.v <- predict.glmnet(LiverClock.glm, newx = t(data.m))
library(glmnet)
load("HepClock.Rd")
load("LiverClock.Rd")
load("ExampleData_Liver.Rd")
HepClockCpGs <- rownames(HepClock.glm$beta)
TestSetCpGs <- rownames(Test.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(HepClockCpGs, TestSetCpGs)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
Test.m <- Test.m[na.omit(idx),]
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
load("ExampleData_Liver.Rd")
data(ExampleData_Liver)
agePred.v = CTSclockAge(Test.m, CTSclock = 'Hep', dataType = 'bulk', CTF.m = NULL, tissue = 'otherTissue')
data.m=Test.m
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(HepClock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
data.m <- data.m[na.omit(idx),]
HepClockCpGs <- rownames(HepClock.glm$beta)
TestSetCpGs <- rownames(Test.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(HepClockCpGs, TestSetCpGs)
HepClock.glm$beta <- HepClock.glm$beta[!is.na(idx),, drop = FALSE]
HepClock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
Test.m <- Test.m[na.omit(idx),]
DNAmAge <- predict.glmnet(HepClock.glm,newx = t(Test.m))
DNAmAge <- predict.glmnet(HepClock.glm,newx = t(data.m))
DNAmAgePred.v <- predict.glmnet(HepClock.glm, newx = t(data.m))
ClockCpGs.v <- rownames(eval(parse(text = paste0(CTSclock, 'Clock.glm')))$beta)
document()
library(usethis)
library(devtools)
library(roxygen2)
document()
#### test the package
load_all()
library(usethis)
library(devtools)
library(roxygen2)
document()
#### test the package
load_all()
data(MurphyGSE88890)
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
data(ExampleData_Liver)
agePred.v = CTSclockAge(Test.m, CTSclock = 'Hep', dataType = 'bulk', CTF.m = NULL, tissue = 'otherTissue')
CTSclock='Hep'
data(list = paste0(CTSclock, 'Clock'))
ClockCpGs.v <- rownames(eval(parse(text = paste0(CTSclock, 'Clock.glm')))$beta)
TestSetCpGs.v <- rownames(data.m)
data.m=beta.m
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
eval(parse(text = paste0(CTSclock, 'Clock.glm')))$beta <- eval(parse(text = paste0(CTSclock, 'Clock.glm')))$beta[!is.na(idx),, drop = FALSE]
data(list = paste0(CTSclock, 'Clock'))
Clock.glm = eval(parse(text = paste0(CTSclock, 'Clock.glm')))
ClockCpGs.v <- rownames(Clock.glm$beta)
TestSetCpGs.v <- rownames(data.m)
# Trim clock. Remember to reload the clock when applying new data sets
idx <- match(ClockCpGs.v, TestSetCpGs.v)
Clock.glm$beta <- eval(parse(text = paste0(CTSclock, 'Clock.glm')))$beta[!is.na(idx),, drop = FALSE]
Clock.glm$dim <- c(sum(!is.na(idx)),1)
# Trim sample data
data.m <- data.m[na.omit(idx),]
DNAmAgePred.v <- predict.glmnet(Clock.glm, newx = t(data.m))
library(usethis)
library(devtools)
library(roxygen2)
document()
#### test the package
load_all()
data(MurphyGSE88890)
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
data(ExampleData_Liver)
agePred.v = CTSclockAge(Test.m, CTSclock = 'Hep', dataType = 'bulk', CTF.m = NULL, tissue = 'otherTissue')
plot(Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
library(usethis)
library(devtools)
library(roxygen2)
document()
#### test the package
load_all()
data(MurphyGSE88890)
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
data(ExampleData_Liver)
agePred.v = CTSclockAge(Test.m, CTSclock = 'Hep', dataType = 'bulk', CTF.m = NULL, tissue = 'otherTissue')
plot(Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
cor.test(Age, agePred.v)
agePred.v = CTSclockAge(Test.m, CTSclock = 'Liver', dataType = 'bulk', CTF.m = NULL, tissue = 'otherTissue')
plot(Age, agePred.v)
cor.test(Age, agePred.v)
data(MurphyGSE88890)
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-Ex', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
data(MurphyGSE88890)
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-Ex', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)$p.v
agePred.v = CTSclockAge(beta.m, CTSclock = 'Brain', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
data("PaiGSE112179")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
data("PaiGSE112179")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'sorted', CTF.m = NULL, tissue = 'brain')
data.m=beta.m
library(usethis)
library(devtools)
library(roxygen2)
document()
#### test the package
load_all()
data(MurphyGSE88890)
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
data(ExampleData_Liver)
agePred.v = CTSclockAge(Test.m, CTSclock = 'Hep', dataType = 'bulk', CTF.m = NULL, tissue = 'otherTissue')
plot(Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
cor.test(Age, agePred.v)
data("PaiGSE112179")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'sorted', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
estF.m = HiBED_deconvolution(data.m, h=1)
estF.m = HiBED_deconvolution(beta.m, h=1)
estF.m = estF.m/100
colnames(estF.m) = c('EndoStrom', 'Glia', 'Neu')
estF.m = estF.m[, c('Neu', 'Glia', 'EndoStrom')]
CTF.m = as.matrix(estF.m)
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'sorted', CTF.m = CTF.m, tissue = 'brain')
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'sorted', CTF.m = NULL, tissue = 'other')
agePred.v = CTSclockAge(Test.m, CTSclock = 'Hep', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
load('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/data/BrainBulkDNAm/Brokaw_GSE134379/Brokaw_GSE134379.rda')
agePred.v = CTSclockAge(bmiqN.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
agePred.v = CTSclockAge(bmiqN.m, CTSclock = 'Neu-In', dataType = 'sorted', CTF.m = NULL, tissue = 'brain')
data.m=bmiqN.m
## Normalize the data
dataSD.v = apply(data.m,1,sd);
dataSD1.v = parallel::mclapply(1:nrow(data.m),function(i) sd(data.m[i]))
library(parallel)
dataSD1.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i]), mc.cores = coreNum)
coreNum = 9
dataSD1.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i]), mc.cores = coreNum)
all(dataSD.v==dataSD1.v)
dataSD1.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum)
all(dataSD.v==dataSD1.v)
a=Sys.time()
a=system.time();dataSD1.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum);b=system.time();print(b-a)
b
a=Sys.time();dataSD1.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum);b=Sys.time();print(b-a)
a=Sys.time();dataSD1.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum);b=Sys.time();print(b-a)
a=Sys.time();dataSD1.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum);b=Sys.time();print(b-a)
a=Sys.time();dataSD.v = apply(data.m,1,sd);b=Sys.time();print(b-a)
library(usethis)
library(devtools)
library(roxygen2)
document()
#### test the package
load_all()
data("PaiGSE112179")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'sorted', CTF.m = NULL, tissue = 'brain')
data("MurphyGSE88890")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
coreNum = 9
library(parallel)
data.m=beta.m
## Normalize the data
dataSD.v = mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum)
## Normalize the data
dataSD.v = unlist(mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum))
library(usethis)
library(devtools)
library(roxygen2)
data("MurphyGSE88890")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
document()
#### test the package
load_all()
data("MurphyGSE88890")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
plot(phenotype.df$Age, agePred.v)
cor.test(phenotype.df$Age, agePred.v)
load('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/data/BrainBulkDNAm/Brokaw_GSE134379/Brokaw_GSE134379.rda')
agePred.v = CTSclockAge(bmiqN.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
data.m=bmiqN.m
## Estimate the cell type fractions
estF.m = HiBED_deconvolution(data.m, h=1)
estF.m = estF.m/100
colnames(estF.m) = c('EndoStrom', 'Glia', 'Neu')
estF.m = estF.m[, c('Neu', 'Glia', 'EndoStrom')]
CTF.m = as.matrix(estF.m)
## Adjust for cell type fractions and normalize the data
lm.o = lm(t(data.m) ~ CTF.m)
## Adjust for cell type fractions and normalize the data
lm.o = lm(t(data.m) ~ CTF.m)
document()
#### test the package
load_all()
build()
lm.o = lm(t(data.m) ~ CTF.m[,1])
lm.o = lm(t(data.m) ~ CTF.m[1,])
library(data.table)
lm.o = fastLm(t(data.m) ~ CTF.m)
library(Rcpp)
lm.o = fastLm(t(data.m) ~ CTF.m)
library(RcppEigen)
lm.o = fastLm(t(data.m) ~ CTF.m)
nrow(t(data.m))
nrow(CTF.m)
data.l <- split(data.m, 1:ncol(data.m))
regression <- function(data, CTF) {
fit <- lm(data ~ CTF)
return(fit$residuals)
}
residuals.l <- mclapply(data.l, function(data){regression(data, CTF.m)}, mc.cores = coreNum)
coreNum = 9
data.l <- split(data.m, 1:ncol(data.m))
regression <- function(data, CTF) {
fit <- lm(data ~ CTF)
return(fit$residuals)
}
residuals.l <- mclapply(data.l, function(data){regression(data, CTF.m)}, mc.cores = coreNum)
residuals.l[[1]]
data.l <- split(t(data.m), 1:ncol(t(data.m)))
regression <- function(data, CTF) {
fit <- lm(data ~ CTF)
return(fit$residuals)
}
residuals.l <- mclapply(data.l, function(data){regression(data, CTF.m)}, mc.cores = coreNum)
a = Sys.time()
lm.o = lm(t(data.m) ~ CTF.m)
res.m = t(lm.o$res)
b = Sys.time(); print(b-a)
a = Sys.time()
dataTmp.m = t(data.m)
data.l <- split(dataTmp.m, 1:ncol(dataTmp.m))
regression <- function(data, CTF) {
fit <- lm(data ~ CTF)
return(fit$residuals)
}
residuals.l <- mclapply(data.l, function(data){regression(data, CTF.m)}, mc.cores = coreNum)
res2.m <- matrix(unlist(residuals.l), ncol = ncol(data.m), byrow = TRUE)
b = Sys.time(); print(b-a)
document()
#### test the package
load_all()
data("MurphyGSE88890")
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
cor.test(phenotype.df$Age, agePred.v)
coreNum
coreNum=NULL
if (is.null(coreNum)){coreNum = detectCores()}
## Normalize the data
dataSD.v = unlist(mclapply(1:nrow(data.m),function(i) sd(data.m[i,]), mc.cores = coreNum))
lm.o = lm(t(data.m) ~ CTF.m)
res.m = t(lm.o$res)
resSD.v = unlist(mclapply(1:nrow(res.m),function(i) sd(res.m[i,]), mc.cores = coreNum))
agePred.v = CTSclockAge(beta.m, CTSclock = 'Neu-In', dataType = 'bulk', CTF.m = NULL, tissue = 'brain')
usethis::create_from_github( "https://github.com/HGT-UwU/CTSclocks.git", destdir = "/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/RpackageDev/")
library(usethis)
library(devtools)
library(roxygen2)
usethis::create_from_github( "https://github.com/HGT-UwU/CTSclocks.git", destdir = "/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/RpackageDev/")
create_from_github( "https://github.com/HGT-UwU/CTSclocks.git",
destdir = "/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/RpackageDev/",
auth_token = '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')
rm(list = ls()); gc()
set.seed(5525)
wd = '/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/'; setwd(wd)
cellType = 'Neu'
load(paste0('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/Rdata/', cellType, 'Clock/BrainBulk4ClockAA.rda'))
View(AAall.df)
AAall1.df = load(paste0('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/Rdata/', cellType, 'Clock/BrainBulk4ClockAA.rda'))
AAall1.df = eval(parse(text = load(paste0('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/Rdata/', cellType, 'Clock/BrainBulk4ClockAA.rda')))))
AAall1.df = eval(parse(text = load(paste0('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/Rdata/', cellType, 'Clock/BrainBulk4ClockAA.rda'))))
####### get EAA
cellType = 'Neu'
AAall1.df = eval(parse(text = load(paste0('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/Rdata/', cellType, 'Clock/BrainBulk4ClockAA.rda'))))
cellType = 'Glia'
AAall2.df = eval(parse(text = load(paste0('/mnt/local-disk/data/tonghuige/projects/TissueSpecificEpiClock/BrainEpiClock/Rdata/', cellType, 'Clock/BrainBulk4ClockAA.rda'))))
rm(AAall.df)
table(paste(AAall1.df$Cohort, AAall1.df$Tissue))
library(usethis)
library(devtools)
library(roxygen2)
#### take care of the DESCRIPTION file
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "HiBED", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
build()
build()
build()
use_gpl3_license()
build()
use_gpl3_license()
build()
build()
build()
check()
.Last.error
build()
warnings()
#### take care of the DESCRIPTION file
file.edit("DESCRIPTION")
#### take care of the DESCRIPTION file
use_decription()
#### take care of the DESCRIPTION file
file.edit("DESCRIPTION")
build()
build()
has_devel()
build()
file.edit("DESCRIPTION")
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "HiBED", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
use_gpl3_license()
use_author(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn", role = c("aut", "cre"))
#### take care of the DESCRIPTION file
file.edit("DESCRIPTION")
use_description(overwrite = TRUE)
use_description()
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "HiBED", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
use_gpl3_license()
use_author(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Xiaolong", family = 'Guo', email = "guoxiaolong2022@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Andrew E.", family = 'Teschendorff', email = "andrew@picb.ac.cn", role = c("aut", "cre"))
file.edit("DESCRIPTION")
# use_maintainer(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn")
file.edit("DESCRIPTION")
build()
use_description()
use_gpl3_license()
use_description()
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "HiBED", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
use_gpl3_license()
use_author(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Xiaolong", family = 'Guo', email = "guoxiaolong2022@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Andrew E.", family = 'Teschendorff', email = "andrew@picb.ac.cn", role = c("aut", "cre"))
# use_maintainer(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn")
file.edit("DESCRIPTION")
use_description()
build()
# use_maintainer(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn")
file.edit("DESCRIPTION")
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "HiBED", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
use_gpl3_license()
use_author(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Xiaolong", family = 'Guo', email = "guoxiaolong2022@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Andrew E.", family = 'Teschendorff', email = "andrew@picb.ac.cn", role = c("aut", "cre"))
build()
use_description()
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "HiBED", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
use_gpl3_license()
build()
use_description()
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "HiBED", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
use_gpl3_license()
use_author(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn", role = c("aut", "cre"))
use_author(given = "Xiaolong", family = 'Guo', email = "guoxiaolong2022@sinh.ac.cn", role = c("aut"))
use_author(given = "Andrew E.", family = 'Teschendorff', email = "andrew@picb.ac.cn", role = c("aut"))
build()
# use_maintainer(given = "Huige", family = 'Tong', email = "Tonghuige2021@sinh.ac.cn")
file.edit("DESCRIPTION")
build()
library(usethis)
library(devtools)
library(roxygen2)
document()
build()
